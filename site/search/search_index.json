{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Git.Zone \u00b6 typescript tooling by Lossless","title":"Getting Started"},{"location":"#gitzone","text":"typescript tooling by Lossless","title":"Git.Zone"},{"location":"lossless-runbooks/servermanagement/","text":"Servermangement @ Lossless \u00b6 At lossless servers are managed in a consistent and predefined way, to allow utmost f\u00f6exibility at the docker level while keeping a tight standard on our way there. Basic Server setup \u00b6 OS: Ubuntu 16.04 LTS Adjusting the hostname hostnamectl set-hostname [ YourName ] First command to be run: curl -o- https://curlfresh.ship.zone/setup.sh | sh join a universe servers are managaged within universes. The universe decides what purpose a server will fullfill to join a universe run serverconfig join https://join.universe. [ CompanyMangementDomain ] / [ JoinToken ]","title":"Servermangement @ Lossless"},{"location":"lossless-runbooks/servermanagement/#servermangement-lossless","text":"At lossless servers are managed in a consistent and predefined way, to allow utmost f\u00f6exibility at the docker level while keeping a tight standard on our way there.","title":"Servermangement @ Lossless"},{"location":"lossless-runbooks/servermanagement/#basic-server-setup","text":"OS: Ubuntu 16.04 LTS Adjusting the hostname hostnamectl set-hostname [ YourName ] First command to be run: curl -o- https://curlfresh.ship.zone/setup.sh | sh join a universe servers are managaged within universes. The universe decides what purpose a server will fullfill to join a universe run serverconfig join https://join.universe. [ CompanyMangementDomain ] / [ JoinToken ]","title":"Basic Server setup"},{"location":"stack-tooling/ad_networks/ad_sense/","text":"AdSense \u00b6 The Positive \u00b6 Super easy to integrate Allows you to customize ad categories Allows you to track performance of adplaces as ad units Allows you to bundle ad units as targetable channels It's Google <3 The Negative \u00b6 None really, if you play by the rules (which you always should) How we at Lossless approach it \u00b6 Most of our sites have polymer components for adSense that do the hard stuff and simply take client id and ad slot Watch and Learn \u00b6 Links to learn more \u00b6","title":"AdSense"},{"location":"stack-tooling/ad_networks/ad_sense/#adsense","text":"","title":"AdSense"},{"location":"stack-tooling/ad_networks/ad_sense/#the-positive","text":"Super easy to integrate Allows you to customize ad categories Allows you to track performance of adplaces as ad units Allows you to bundle ad units as targetable channels It's Google <3","title":"The Positive"},{"location":"stack-tooling/ad_networks/ad_sense/#the-negative","text":"None really, if you play by the rules (which you always should)","title":"The Negative"},{"location":"stack-tooling/ad_networks/ad_sense/#how-we-at-lossless-approach-it","text":"Most of our sites have polymer components for adSense that do the hard stuff and simply take client id and ad slot","title":"How we at Lossless approach it"},{"location":"stack-tooling/ad_networks/ad_sense/#watch-and-learn","text":"","title":"Watch and Learn"},{"location":"stack-tooling/ad_networks/ad_sense/#links-to-learn-more","text":"","title":"Links to learn more"},{"location":"stack-tooling/ad_networks/carbon_ads/","text":"Carbon Ads \u00b6 The Positive The Negative How we it at Lossless Watch and Learn Links to learn more:","title":"Carbon Ads"},{"location":"stack-tooling/ad_networks/carbon_ads/#carbon-ads","text":"The Positive The Negative How we it at Lossless Watch and Learn Links to learn more:","title":"Carbon Ads"},{"location":"stack-tooling/backend/gulp/","text":"Gulp \u00b6 We don't use it anymore Gulp has a good idea: The usage of gulp-streams to automate build stuff. It is a lot of biolerplate however. We abandoned it as a result. Take a look at smartgulp , our small replacement that allows usage of gulp plugins in your own scripts without gulp. Gulp is an awesome streaming build system built on nodejs. It utilizes node streams to deal with files in chunks. (Every file is one chunk). The Positive \u00b6 A standard way of doing things Wide support by the community Easy to write and expandable Considerably easy on memory when handling thousands of files, since files move trough the pipeline at a complete maximum of 16 at one time. Only when a file/chunk leaves the pipeline a new one is picked up. The Negative \u00b6 Tool sometimes seems stuck with an old inefiicient dependency tree Too much boilerplate: We usually like it maintainable and good by convention over configuration Our Approach at Lossless \u00b6 We wrote a really lightweight gulp replacement called smartgulp We compose streams with our own smartstream that handles errors with feedback like a champ We take the pain out of plugins with our gulp-function plugins: With support for promises. Watch and Learn \u00b6 Links to learn more \u00b6","title":"Gulp"},{"location":"stack-tooling/backend/gulp/#gulp","text":"We don't use it anymore Gulp has a good idea: The usage of gulp-streams to automate build stuff. It is a lot of biolerplate however. We abandoned it as a result. Take a look at smartgulp , our small replacement that allows usage of gulp plugins in your own scripts without gulp. Gulp is an awesome streaming build system built on nodejs. It utilizes node streams to deal with files in chunks. (Every file is one chunk).","title":"Gulp"},{"location":"stack-tooling/backend/gulp/#the-positive","text":"A standard way of doing things Wide support by the community Easy to write and expandable Considerably easy on memory when handling thousands of files, since files move trough the pipeline at a complete maximum of 16 at one time. Only when a file/chunk leaves the pipeline a new one is picked up.","title":"The Positive"},{"location":"stack-tooling/backend/gulp/#the-negative","text":"Tool sometimes seems stuck with an old inefiicient dependency tree Too much boilerplate: We usually like it maintainable and good by convention over configuration","title":"The Negative"},{"location":"stack-tooling/backend/gulp/#our-approach-at-lossless","text":"We wrote a really lightweight gulp replacement called smartgulp We compose streams with our own smartstream that handles errors with feedback like a champ We take the pain out of plugins with our gulp-function plugins: With support for promises.","title":"Our Approach at Lossless"},{"location":"stack-tooling/backend/gulp/#watch-and-learn","text":"","title":"Watch and Learn"},{"location":"stack-tooling/backend/gulp/#links-to-learn-more","text":"","title":"Links to learn more"},{"location":"stack-tooling/backend/nginx/","text":"Nginx \u00b6 Nginx is a lightweight, easy to configure host software and we recommend it for use together with nodejs and python. The Positive \u00b6 fast stable feature-rich not as bloated as apache The Negative \u00b6 configuration Our approach at Lossless \u00b6 Nginx is good and fast at what it does: handling traffic. The configuration should not be done manually though. This is why we wrote coretraffic, a tool that handles configuration for you and even supports reverse config handling for docker clusters :) and automatic LetsEncrypt certificate retrieval. Watch and Learn \u00b6 Links to learn more \u00b6 Handy stuff \u00b6 nginx config for static content: \u00b6 Here is a bestpractice standard config file that will serve the site/ directory of your project: server { listen *:80 ; server_name ~ ^(www\\.)?(?<domain>.+)$; rewrite ^ https:// $domain$request_uri permanent ; } server { listen *:443 ssl ; server_name ~ ^(www\\.)?(?<domain>.+)$; access_log /var/log/nginx/servezone.access.log ; error_log /var/log/nginx/servezone.error.log ; root /srv/www/ $domain/site/ ; index index.html index.htm index.php ; location / { } location = /favicon.ico { log_not_found off ; access_log off ; } location = /robots.txt { allow all ; log_not_found off ; access_log off ; } ssl_certificate /srv/ssl/newssl/server.crt ; ssl_certificate_key /srv/ssl/newssl/server.key ; location ~ /\\.git { deny all ; } } nginx with Docker \u00b6 Read on here to get a neat nginx setup for docker containers. fix permissions of serving directory \u00b6 this assumes that your nginx runs as user www-data sudo chown -cR www-data:www-data /servingDir/","title":"Nginx"},{"location":"stack-tooling/backend/nginx/#nginx","text":"Nginx is a lightweight, easy to configure host software and we recommend it for use together with nodejs and python.","title":"Nginx"},{"location":"stack-tooling/backend/nginx/#the-positive","text":"fast stable feature-rich not as bloated as apache","title":"The Positive"},{"location":"stack-tooling/backend/nginx/#the-negative","text":"configuration","title":"The Negative"},{"location":"stack-tooling/backend/nginx/#our-approach-at-lossless","text":"Nginx is good and fast at what it does: handling traffic. The configuration should not be done manually though. This is why we wrote coretraffic, a tool that handles configuration for you and even supports reverse config handling for docker clusters :) and automatic LetsEncrypt certificate retrieval.","title":"Our approach at Lossless"},{"location":"stack-tooling/backend/nginx/#watch-and-learn","text":"","title":"Watch and Learn"},{"location":"stack-tooling/backend/nginx/#links-to-learn-more","text":"","title":"Links to learn more"},{"location":"stack-tooling/backend/nginx/#handy-stuff","text":"","title":"Handy stuff"},{"location":"stack-tooling/backend/nginx/#nginx-config-for-static-content","text":"Here is a bestpractice standard config file that will serve the site/ directory of your project: server { listen *:80 ; server_name ~ ^(www\\.)?(?<domain>.+)$; rewrite ^ https:// $domain$request_uri permanent ; } server { listen *:443 ssl ; server_name ~ ^(www\\.)?(?<domain>.+)$; access_log /var/log/nginx/servezone.access.log ; error_log /var/log/nginx/servezone.error.log ; root /srv/www/ $domain/site/ ; index index.html index.htm index.php ; location / { } location = /favicon.ico { log_not_found off ; access_log off ; } location = /robots.txt { allow all ; log_not_found off ; access_log off ; } ssl_certificate /srv/ssl/newssl/server.crt ; ssl_certificate_key /srv/ssl/newssl/server.key ; location ~ /\\.git { deny all ; } }","title":"nginx config for static content:"},{"location":"stack-tooling/backend/nginx/#nginx-with-docker","text":"Read on here to get a neat nginx setup for docker containers.","title":"nginx with Docker"},{"location":"stack-tooling/backend/nginx/#fix-permissions-of-serving-directory","text":"this assumes that your nginx runs as user www-data sudo chown -cR www-data:www-data /servingDir/","title":"fix permissions of serving directory"},{"location":"stack-tooling/backend/nodejs/","text":"node.js \u00b6 Node.js , or simply node , is a JavaScript environment for server and desktop environments. How to install \u00b6 To install NodeJS in a required version the easiest way is the node version manager . Install nvm: To install nvm use curl: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.1/install.sh | bash # Installs nvm # For latest version of nvm please see the official repo at: # https://github.com/creationix/nvm Then install a node version like this: nvm install v4.2.4 nvm alias default v4.2.4 # first line installs node in version # second line makes v4.2.4 the default version when starting bash","title":"node.js"},{"location":"stack-tooling/backend/nodejs/#nodejs","text":"Node.js , or simply node , is a JavaScript environment for server and desktop environments.","title":"node.js"},{"location":"stack-tooling/backend/nodejs/#how-to-install","text":"To install NodeJS in a required version the easiest way is the node version manager . Install nvm: To install nvm use curl: curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.1/install.sh | bash # Installs nvm # For latest version of nvm please see the official repo at: # https://github.com/creationix/nvm Then install a node version like this: nvm install v4.2.4 nvm alias default v4.2.4 # first line installs node in version # second line makes v4.2.4 the default version when starting bash","title":"How to install"},{"location":"stack-tooling/ci/gitlab-ci/","text":"Gitlab CI \u00b6 Gitlab CI is a Continuous Integration service developed and maintained by GitLab Inc. It is available for free as Open Source to self install. As of now the on demand service at gitlab.com is also free to use. This doc covers the software. Positive \u00b6 Scale automatically on demand Runs entirely in docker You can do about anything, just output exit code 0 or 1 at the end to indicate success or failure Negative \u00b6 Basically none How we approach it at Lossless \u00b6 We wrote a library called npmci Watch and Learn \u00b6 Links to learn more \u00b6 http://doc.gitlab.com/ee/ci/yaml/README.html https://gitlab.com/gitlab-org/gitlab-ci-multi-runner http://stackoverflow.com/questions/20424814/are-gitlab-deployment-keys-read-only To see/edit the config use the following command: sudo nano /etc/gitlab-runner/config.toml","title":"Gitlab CI"},{"location":"stack-tooling/ci/gitlab-ci/#gitlab-ci","text":"Gitlab CI is a Continuous Integration service developed and maintained by GitLab Inc. It is available for free as Open Source to self install. As of now the on demand service at gitlab.com is also free to use. This doc covers the software.","title":"Gitlab CI"},{"location":"stack-tooling/ci/gitlab-ci/#positive","text":"Scale automatically on demand Runs entirely in docker You can do about anything, just output exit code 0 or 1 at the end to indicate success or failure","title":"Positive"},{"location":"stack-tooling/ci/gitlab-ci/#negative","text":"Basically none","title":"Negative"},{"location":"stack-tooling/ci/gitlab-ci/#how-we-approach-it-at-lossless","text":"We wrote a library called npmci","title":"How we approach it at Lossless"},{"location":"stack-tooling/ci/gitlab-ci/#watch-and-learn","text":"","title":"Watch and Learn"},{"location":"stack-tooling/ci/gitlab-ci/#links-to-learn-more","text":"http://doc.gitlab.com/ee/ci/yaml/README.html https://gitlab.com/gitlab-org/gitlab-ci-multi-runner http://stackoverflow.com/questions/20424814/are-gitlab-deployment-keys-read-only To see/edit the config use the following command: sudo nano /etc/gitlab-runner/config.toml","title":"Links to learn more"},{"location":"stack-tooling/cluster/docker/","text":"Docker \u00b6 Docker is the most common container engine and format around. SUpport across major clouds is excellent. Installing Docker \u00b6 Installing docker is fairly easy. Simply run the following command (The script will ask for your sudo password if required) curl -sSL https://get.docker.com/ | sh If it prompts that you haven't yet installed curl, do so first and run the command above it again. If it complains about SSL try installing the ca-certificates package. Installing Docker-Compose \u00b6 Docker-Compose makes it easy to setup more complex configurations. It is highly recommended to install it. # Get permissions to install Docker Compose sudo -i # Download Docker Compose curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose- ` uname -s ` - ` uname -m ` > /usr/local/bin/docker-compose # Give it executable rights chmod +x /usr/local/bin/docker-compose # return to previous rights exit Note: the latest release for docker-compose is: Things that are good to know when building containers \u00b6 # adding things to path ENV PATH /root/.yarn/bin:$PATH Managing containers \u00b6 There are various tools out there to take care of that. However if you just run a few containers it might be easier to just learn a few commands directly from docker. The difference between image tags and container names Docker can be a bit tricky when it comes to terminology: An image is being built from a Dockerfile. This image can have tags specified by option -t. You then can create a actual container from that image that can have a specific name. You can use that name to control the container. e.g. docker start labs , docker stop labs . list all running docker containers docker ps Manage containers and images # Remove all containers docker rm $( docker ps -a -q ) # Remove containers that are not currently running docker rm $( docker ps -q -f status = exited ) # Remove all images docker rmi $( docker images -q ) # Run a seperate shell in a container docker exec -it my_container_name bash # attach current shell/bash to running containers # Note: Please think about executina seperate shell in a container like shown above $ sudo docker attach loving_heisenberg #by Name # run bash in any image without using the original command docker run -it --entrypoint /bin/bash <image> # find out why a particular service is not running docker service ps --no-trunc <servicename> Remove all images Docker toolbox \u00b6 point docker-machine to the right virtualbox instance docker-machine env --shell cmd default Tools we wrote at Lossless \u00b6 npmdocker \u00b6 npmdocker simplifies development of npm modules on your Mac or Linux machine. It comes preinstalled with a lot of handy stuff to make the most of your development experience Install it: \u00b6 yarn global add npmdocker Links to learn more \u00b6","title":"Docker"},{"location":"stack-tooling/cluster/docker/#docker","text":"Docker is the most common container engine and format around. SUpport across major clouds is excellent.","title":"Docker"},{"location":"stack-tooling/cluster/docker/#installing-docker","text":"Installing docker is fairly easy. Simply run the following command (The script will ask for your sudo password if required) curl -sSL https://get.docker.com/ | sh If it prompts that you haven't yet installed curl, do so first and run the command above it again. If it complains about SSL try installing the ca-certificates package.","title":"Installing Docker"},{"location":"stack-tooling/cluster/docker/#installing-docker-compose","text":"Docker-Compose makes it easy to setup more complex configurations. It is highly recommended to install it. # Get permissions to install Docker Compose sudo -i # Download Docker Compose curl -L https://github.com/docker/compose/releases/download/1.6.2/docker-compose- ` uname -s ` - ` uname -m ` > /usr/local/bin/docker-compose # Give it executable rights chmod +x /usr/local/bin/docker-compose # return to previous rights exit Note: the latest release for docker-compose is:","title":"Installing Docker-Compose"},{"location":"stack-tooling/cluster/docker/#things-that-are-good-to-know-when-building-containers","text":"# adding things to path ENV PATH /root/.yarn/bin:$PATH","title":"Things that are good to know when building containers"},{"location":"stack-tooling/cluster/docker/#managing-containers","text":"There are various tools out there to take care of that. However if you just run a few containers it might be easier to just learn a few commands directly from docker. The difference between image tags and container names Docker can be a bit tricky when it comes to terminology: An image is being built from a Dockerfile. This image can have tags specified by option -t. You then can create a actual container from that image that can have a specific name. You can use that name to control the container. e.g. docker start labs , docker stop labs . list all running docker containers docker ps Manage containers and images # Remove all containers docker rm $( docker ps -a -q ) # Remove containers that are not currently running docker rm $( docker ps -q -f status = exited ) # Remove all images docker rmi $( docker images -q ) # Run a seperate shell in a container docker exec -it my_container_name bash # attach current shell/bash to running containers # Note: Please think about executina seperate shell in a container like shown above $ sudo docker attach loving_heisenberg #by Name # run bash in any image without using the original command docker run -it --entrypoint /bin/bash <image> # find out why a particular service is not running docker service ps --no-trunc <servicename> Remove all images","title":"Managing containers"},{"location":"stack-tooling/cluster/docker/#docker-toolbox","text":"point docker-machine to the right virtualbox instance docker-machine env --shell cmd default","title":"Docker toolbox"},{"location":"stack-tooling/cluster/docker/#tools-we-wrote-at-lossless","text":"","title":"Tools we wrote at Lossless"},{"location":"stack-tooling/cluster/docker/#npmdocker","text":"npmdocker simplifies development of npm modules on your Mac or Linux machine. It comes preinstalled with a lot of handy stuff to make the most of your development experience","title":"npmdocker"},{"location":"stack-tooling/cluster/docker/#install-it","text":"yarn global add npmdocker","title":"Install it:"},{"location":"stack-tooling/cluster/docker/#links-to-learn-more","text":"","title":"Links to learn more"},{"location":"stack-tooling/cluster/kubernetes/","text":"Kubernetes \u00b6 To complicated for now. Run it in Google Cloud if you must. :) Links \u00b6 http://linoxide.com/devops/setup-kubernetes-1-4-kubeadm-ubuntu/","title":"Kubernetes"},{"location":"stack-tooling/cluster/kubernetes/#kubernetes","text":"To complicated for now. Run it in Google Cloud if you must. :)","title":"Kubernetes"},{"location":"stack-tooling/cluster/kubernetes/#links","text":"http://linoxide.com/devops/setup-kubernetes-1-4-kubeadm-ubuntu/","title":"Links"},{"location":"stack-tooling/code_management/git/","text":"Git \u00b6 git is a versioning tool for source code. configure git \u00b6 Generate SSH Key \u00b6 type in a terminal: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # Creates a new ssh key, using the provided email as a label # Generating public/private rsa key pair. TIP: store the result with a unique filename in your accounts ~/.ssh directory then copy the key to the public desired machine ssh-copy-id -i [ yourcustomname ] .pub [ username ] @ [ serverhost ] Tell git who you are \u00b6 git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com Tips and Tricks \u00b6 Make current commit the intial commit: \u00b6 git checkout --orphan newBranch git add -A # Add all files and commit them git commit git branch -D master # Deletes the master branch git branch -m master # Rename the current branch to master Go one commit back and ommit the latest commit \u00b6 git reset --hard HEAD~1 git push origin <branchname> Show the branch you are in in the CLI \u00b6 Have a look here: https://github.com/jimeh/git-aware-prompt","title":"Git"},{"location":"stack-tooling/code_management/git/#git","text":"git is a versioning tool for source code.","title":"Git"},{"location":"stack-tooling/code_management/git/#configure-git","text":"","title":"configure git"},{"location":"stack-tooling/code_management/git/#generate-ssh-key","text":"type in a terminal: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # Creates a new ssh key, using the provided email as a label # Generating public/private rsa key pair. TIP: store the result with a unique filename in your accounts ~/.ssh directory then copy the key to the public desired machine ssh-copy-id -i [ yourcustomname ] .pub [ username ] @ [ serverhost ]","title":"Generate SSH Key"},{"location":"stack-tooling/code_management/git/#tell-git-who-you-are","text":"git config --global user.name \"John Doe\" git config --global user.email johndoe@example.com","title":"Tell git who you are"},{"location":"stack-tooling/code_management/git/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"stack-tooling/code_management/git/#make-current-commit-the-intial-commit","text":"git checkout --orphan newBranch git add -A # Add all files and commit them git commit git branch -D master # Deletes the master branch git branch -m master # Rename the current branch to master","title":"Make current commit the intial commit:"},{"location":"stack-tooling/code_management/git/#go-one-commit-back-and-ommit-the-latest-commit","text":"git reset --hard HEAD~1 git push origin <branchname>","title":"Go one commit back and ommit the latest commit"},{"location":"stack-tooling/code_management/git/#show-the-branch-you-are-in-in-the-cli","text":"Have a look here: https://github.com/jimeh/git-aware-prompt","title":"Show the branch you are in in the CLI"},{"location":"stack-tooling/code_management/npm/","text":"Npm \u00b6 npm is short for \"node package manager\" and by now has grown to be the largest software registry of the world. npm is one of the most useful tools you'll come accross as it makes creation, consumption, sharing and maintance of modules super easy and convenient. Npm also has a client tool called npm which ships with node by default. Positive \u00b6 Find what you need: Npm is so big that there are quality packages for many usecases. Create your own packages and share them Go private if you need to Learn Semantic Versioning and now when something breaks beforehand. Awesome Negative \u00b6 hmmm, can't think of anything right now. How we approach it at Lossless \u00b6 Watch and Learn \u00b6 Links to learn more \u00b6 Handy Stuff \u00b6","title":"Npm"},{"location":"stack-tooling/code_management/npm/#npm","text":"npm is short for \"node package manager\" and by now has grown to be the largest software registry of the world. npm is one of the most useful tools you'll come accross as it makes creation, consumption, sharing and maintance of modules super easy and convenient. Npm also has a client tool called npm which ships with node by default.","title":"Npm"},{"location":"stack-tooling/code_management/npm/#positive","text":"Find what you need: Npm is so big that there are quality packages for many usecases. Create your own packages and share them Go private if you need to Learn Semantic Versioning and now when something breaks beforehand. Awesome","title":"Positive"},{"location":"stack-tooling/code_management/npm/#negative","text":"hmmm, can't think of anything right now.","title":"Negative"},{"location":"stack-tooling/code_management/npm/#how-we-approach-it-at-lossless","text":"","title":"How we approach it at Lossless"},{"location":"stack-tooling/code_management/npm/#watch-and-learn","text":"","title":"Watch and Learn"},{"location":"stack-tooling/code_management/npm/#links-to-learn-more","text":"","title":"Links to learn more"},{"location":"stack-tooling/code_management/npm/#handy-stuff","text":"","title":"Handy Stuff"},{"location":"stack-tooling/code_management/yarn/","text":"Yarn \u00b6 Positive \u00b6 quicker than npm cli tool More secure than npm cli tool Uses the same public npm server registry Caches things Produces reproducible builds :) Supports flat dependency trees ( -> Polymer ) Negative \u00b6 Does not work with git as nicely as npm How we approach it at Lossless \u00b6","title":"Yarn"},{"location":"stack-tooling/code_management/yarn/#yarn","text":"","title":"Yarn"},{"location":"stack-tooling/code_management/yarn/#positive","text":"quicker than npm cli tool More secure than npm cli tool Uses the same public npm server registry Caches things Produces reproducible builds :) Supports flat dependency trees ( -> Polymer )","title":"Positive"},{"location":"stack-tooling/code_management/yarn/#negative","text":"Does not work with git as nicely as npm","title":"Negative"},{"location":"stack-tooling/code_management/yarn/#how-we-approach-it-at-lossless","text":"","title":"How we approach it at Lossless"},{"location":"stack-tooling/database/mongodb/","text":"MongoDB \u00b6","title":"MongoDB"},{"location":"stack-tooling/database/mongodb/#mongodb","text":"","title":"MongoDB"},{"location":"stack-tooling/database/mysql/","text":"MySQL \u00b6 MySql is a relational database program. Dump the database (Backup) \u00b6 mysqldump -u [ username ] -p [ userPassword ] [ databaseName ] > [ path/to/your/.sql file ] Useful links: \u00b6 http://stackoverflow.com/questions/17666249/how-to-import-an-sql-file-using-the-command-line-in-mysql","title":"MySQL"},{"location":"stack-tooling/database/mysql/#mysql","text":"MySql is a relational database program.","title":"MySQL"},{"location":"stack-tooling/database/mysql/#dump-the-database-backup","text":"mysqldump -u [ username ] -p [ userPassword ] [ databaseName ] > [ path/to/your/.sql file ]","title":"Dump the database (Backup)"},{"location":"stack-tooling/database/mysql/#useful-links","text":"http://stackoverflow.com/questions/17666249/how-to-import-an-sql-file-using-the-command-line-in-mysql","title":"Useful links:"},{"location":"stack-tooling/database/rethinkdb/","text":"","title":"Rethinkdb"},{"location":"stack-tooling/frontend/angular/","text":"angular 2 \u00b6 Interesting links: Nesting content with ng-content * https://toddmotto.com/transclusion-in-angular-2-with-ng-content","title":"angular 2"},{"location":"stack-tooling/frontend/angular/#angular-2","text":"Interesting links: Nesting content with ng-content * https://toddmotto.com/transclusion-in-angular-2-with-ng-content","title":"angular 2"},{"location":"stack-tooling/frontend/polymer/","text":"","title":"Polymer"},{"location":"stack-tooling/frontend/sass/","text":"","title":"Sass"},{"location":"stack-tooling/linux/linuxcommands/","text":"Linux Commands \u00b6 Filesystem Operations \u00b6 This section covers the basics of standard file operations within Linux. Create, Copy, Move, Delete \u00b6 Create \u00b6 Create a new textfile (html, jade, sass, coffee, javascript all are text-files): nano [name of your new text file] # note we are using nano for this Copy \u00b6 Copy a file: cp [ file to copy ] [ directory to copy into ] you can add various options. A few of them are: -n // does prevent overwriting a file -s // creates a symbolic link instead of copying the file SymLink \u00b6 To symlink a directory, type the following sudo ln -s /pathtofolder1/child/ /pathtofolder2/parent/ Note: \u00b6 if parent folder exists then symlink of /pathtofolder2/parent/child/ points to /pathtofolder1/child if parent folder does not exist then symlink of pathtofolder2/parent/ points to pathtofolder1/child","title":"Linux Commands"},{"location":"stack-tooling/linux/linuxcommands/#linux-commands","text":"","title":"Linux Commands"},{"location":"stack-tooling/linux/linuxcommands/#filesystem-operations","text":"This section covers the basics of standard file operations within Linux.","title":"Filesystem Operations"},{"location":"stack-tooling/linux/linuxcommands/#create-copy-move-delete","text":"","title":"Create, Copy, Move, Delete"},{"location":"stack-tooling/linux/linuxcommands/#create","text":"Create a new textfile (html, jade, sass, coffee, javascript all are text-files): nano [name of your new text file] # note we are using nano for this","title":"Create"},{"location":"stack-tooling/linux/linuxcommands/#copy","text":"Copy a file: cp [ file to copy ] [ directory to copy into ] you can add various options. A few of them are: -n // does prevent overwriting a file -s // creates a symbolic link instead of copying the file","title":"Copy"},{"location":"stack-tooling/linux/linuxcommands/#symlink","text":"To symlink a directory, type the following sudo ln -s /pathtofolder1/child/ /pathtofolder2/parent/","title":"SymLink"},{"location":"stack-tooling/linux/linuxcommands/#note","text":"if parent folder exists then symlink of /pathtofolder2/parent/child/ points to /pathtofolder1/child if parent folder does not exist then symlink of pathtofolder2/parent/ points to pathtofolder1/child","title":"Note:"},{"location":"stack-tooling/linux/rsync/","text":"rsync \u00b6 Install \u00b6 Linux: apt-get install rsync Mac: brew tap homebrew/dupes brew install rsync And then edit /private/etc/paths to put /usr/local/bin before /usr/bin .","title":"rsync"},{"location":"stack-tooling/linux/rsync/#rsync","text":"","title":"rsync"},{"location":"stack-tooling/linux/rsync/#install","text":"Linux: apt-get install rsync Mac: brew tap homebrew/dupes brew install rsync And then edit /private/etc/paths to put /usr/local/bin before /usr/bin .","title":"Install"},{"location":"stack-tooling/linux/ssh/","text":"SSH \u00b6 SSH is a ever handy tool from git to server management - SSH is your friend and time-saver. SSH keys are very usefull for server communication. Generate a SSH key pair \u00b6 type in a terminal: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # Creates a new ssh key, using the provided email as a label # Generating public/private rsa key pair. Note: Your default SSH idendentity will be stored at ~/.ssh/id_rsa . It'll be used for SSH authentication without any config. You can use multiple identities and wire them up with a config file at ~/.ssh/config . Store SSH key in Env-Vars \u00b6 # creates base 64 encoded var openssl base64 -A -in id_rsa -out id_rsa64 then store it in an ENV Variable (for example $MY_SSHKEY ). then when you need to read the key: # writes the key to disk in base64 encoding echo $MY_SSHKEY > ~/.ssh/id_rsa64 # converts it to valid SSH key openssl base64 -d -A -in ~/.ssh/id_rsa64 -out ~/.ssh/id_rsa","title":"SSH"},{"location":"stack-tooling/linux/ssh/#ssh","text":"SSH is a ever handy tool from git to server management - SSH is your friend and time-saver. SSH keys are very usefull for server communication.","title":"SSH"},{"location":"stack-tooling/linux/ssh/#generate-a-ssh-key-pair","text":"type in a terminal: $ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" # Creates a new ssh key, using the provided email as a label # Generating public/private rsa key pair. Note: Your default SSH idendentity will be stored at ~/.ssh/id_rsa . It'll be used for SSH authentication without any config. You can use multiple identities and wire them up with a config file at ~/.ssh/config .","title":"Generate a SSH key pair"},{"location":"stack-tooling/linux/ssh/#store-ssh-key-in-env-vars","text":"# creates base 64 encoded var openssl base64 -A -in id_rsa -out id_rsa64 then store it in an ENV Variable (for example $MY_SSHKEY ). then when you need to read the key: # writes the key to disk in base64 encoding echo $MY_SSHKEY > ~/.ssh/id_rsa64 # converts it to valid SSH key openssl base64 -d -A -in ~/.ssh/id_rsa64 -out ~/.ssh/id_rsa","title":"Store SSH key in Env-Vars"},{"location":"stack-tooling/linux/ssl/","text":"SSL \u00b6 Generate self-singed SSL \u00b6 #!/bin/bash echo \"Generating an SSL private key to sign your certificate...\" openssl genrsa -des3 -out ./newssl/server.key 2048 echo \"Generating a Certificate Signing Request...\" openssl req -new -key ./newssl/server.key -out ./newssl/server.csr echo \"Removing passphrase from key (for nginx)...\" cp ./newssl/server.key ./newssl/server.key.org openssl rsa -in ./newssl/server.key.org -out ./newssl/server.key rm ./newssl/server.key.org echo \"Generating certificate...\" openssl x509 -req -days 365 -in ./newssl/server.csr -signkey ./newssl/server.key -out ./newssl/server.crt echo \"SSL script finished\" Note: The script above creates a self signed certificate, which will throw trust errors when used in common browsers like Google Chrome, Apple Safari or Mozilla Direfox. You can create free valid certificates using letsencrypt.","title":"SSL"},{"location":"stack-tooling/linux/ssl/#ssl","text":"","title":"SSL"},{"location":"stack-tooling/linux/ssl/#generate-self-singed-ssl","text":"#!/bin/bash echo \"Generating an SSL private key to sign your certificate...\" openssl genrsa -des3 -out ./newssl/server.key 2048 echo \"Generating a Certificate Signing Request...\" openssl req -new -key ./newssl/server.key -out ./newssl/server.csr echo \"Removing passphrase from key (for nginx)...\" cp ./newssl/server.key ./newssl/server.key.org openssl rsa -in ./newssl/server.key.org -out ./newssl/server.key rm ./newssl/server.key.org echo \"Generating certificate...\" openssl x509 -req -days 365 -in ./newssl/server.csr -signkey ./newssl/server.key -out ./newssl/server.crt echo \"SSL script finished\" Note: The script above creates a self signed certificate, which will throw trust errors when used in common browsers like Google Chrome, Apple Safari or Mozilla Direfox. You can create free valid certificates using letsencrypt.","title":"Generate self-singed SSL"},{"location":"stack-tooling/linux/tar/","text":"Tar \u00b6 How to pack files & folders into an archive \u00b6 $ tar -cvf output.tar inputDir how to unpack files & folders into a directory \u00b6 $ tar -xvf input.tar outputDir/ # note: for current directory use the '.'","title":"Tar"},{"location":"stack-tooling/linux/tar/#tar","text":"","title":"Tar"},{"location":"stack-tooling/linux/tar/#how-to-pack-files-folders-into-an-archive","text":"$ tar -cvf output.tar inputDir","title":"How to pack files &amp; folders into an archive"},{"location":"stack-tooling/linux/tar/#how-to-unpack-files-folders-into-a-directory","text":"$ tar -xvf input.tar outputDir/ # note: for current directory use the '.'","title":"how to unpack files &amp; folders into a directory"},{"location":"stack-tooling/linux/tmux/","text":"tmux \u00b6 session management \u00b6 tmux ls (or tmux list-sessions) tmux new -s session-name Ctrl-b d Detach from session tmux attach -t [session name] tmux kill-session -t session-name Ctrl-b c Create new window Ctrl-b d Detach current client Ctrl-b l Move to previously selected window Ctrl-b n Move to the next window Ctrl-b p Move to the previous window Ctrl-b & Kill the current window Ctrl-b , Rename the current window Ctrl-b q Show pane numbers (used to switch between panes) Ctrl-b o Switch to the next pane Ctrl-b ? List all keybindings moving between windows \u00b6 Ctrl-b n (Move to the next window) Ctrl-b p (Move to the previous window) Ctrl-b l (Move to the previously selected window) Ctrl-b w (List all windows / window numbers) Ctrl-b window number (Move to the specified window number, the default bindings are from 0 -- 9) Tiling commands \u00b6 Ctrl-b % (Split the window vertically) CTRL-b \" (Split window horizontally) Ctrl-b o (Goto next pane) Ctrl-b q (Show pane numbers, when the numbers show up type the key to go to that pane) Ctrl-b { (Move the current pane left) Ctrl-b } (Move the current pane right) Make a pane its own window \u00b6 Ctrl-b : \"break-pane\" add to ~/.tmux.conf \u00b6 bind | split-window -h bind - split-window -v","title":"tmux"},{"location":"stack-tooling/linux/tmux/#tmux","text":"","title":"tmux"},{"location":"stack-tooling/linux/tmux/#session-management","text":"tmux ls (or tmux list-sessions) tmux new -s session-name Ctrl-b d Detach from session tmux attach -t [session name] tmux kill-session -t session-name Ctrl-b c Create new window Ctrl-b d Detach current client Ctrl-b l Move to previously selected window Ctrl-b n Move to the next window Ctrl-b p Move to the previous window Ctrl-b & Kill the current window Ctrl-b , Rename the current window Ctrl-b q Show pane numbers (used to switch between panes) Ctrl-b o Switch to the next pane Ctrl-b ? List all keybindings","title":"session management"},{"location":"stack-tooling/linux/tmux/#moving-between-windows","text":"Ctrl-b n (Move to the next window) Ctrl-b p (Move to the previous window) Ctrl-b l (Move to the previously selected window) Ctrl-b w (List all windows / window numbers) Ctrl-b window number (Move to the specified window number, the default bindings are from 0 -- 9)","title":"moving between windows"},{"location":"stack-tooling/linux/tmux/#tiling-commands","text":"Ctrl-b % (Split the window vertically) CTRL-b \" (Split window horizontally) Ctrl-b o (Goto next pane) Ctrl-b q (Show pane numbers, when the numbers show up type the key to go to that pane) Ctrl-b { (Move the current pane left) Ctrl-b } (Move the current pane right)","title":"Tiling commands"},{"location":"stack-tooling/linux/tmux/#make-a-pane-its-own-window","text":"Ctrl-b : \"break-pane\"","title":"Make a pane its own window"},{"location":"stack-tooling/linux/tmux/#add-to-tmuxconf","text":"bind | split-window -h bind - split-window -v","title":"add to ~/.tmux.conf"},{"location":"stack-tooling/mac/settings/","text":"Mac Management \u00b6 Info Take a look at our curlfresh tool for setting up new macs # disable mac back and forth defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool FALSE # sync time with Apple server sudo sntp -sS time.apple.com","title":"Settings"},{"location":"stack-tooling/mac/settings/#mac-management","text":"Info Take a look at our curlfresh tool for setting up new macs # disable mac back and forth defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool FALSE # sync time with Apple server sudo sntp -sS time.apple.com","title":"Mac Management"},{"location":"stack-tooling/programming/typescript/","text":"TypeScript \u00b6 Here is a cool video that clears up how to use modules in TypeScript: Links \u00b6 Observables: https://egghead.io/lessons/rxjs-creating-an-observable https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises Runtime Type Checking: https://vsavkin.com/typescript-how-to-be-safe-even-if-you-cannot-type-it-31eb08485fe6","title":"TypeScript"},{"location":"stack-tooling/programming/typescript/#typescript","text":"Here is a cool video that clears up how to use modules in TypeScript:","title":"TypeScript"},{"location":"stack-tooling/programming/typescript/#links","text":"Observables: https://egghead.io/lessons/rxjs-creating-an-observable https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises Runtime Type Checking: https://vsavkin.com/typescript-how-to-be-safe-even-if-you-cannot-type-it-31eb08485fe6","title":"Links"},{"location":"stack-tooling/tracking/cookie/","text":"Cookies \u00b6 Definition \u00b6 From wikipedia: \"An HTTP cookie (also called web cookie, Internet cookie, browser cookie or simply cookie, the latter which is not to be confused with the literal definition), is a small piece of data sent from a website and stored in a user's web browser while the user is browsing that website. Every time the user loads the website, the browser sends the cookie back to the server to notify the website of the user's previous activity.[1] Cookies were designed to be a reliable mechanism for websites to remember stateful information (such as items in a shopping cart) or to record the user's browsing activity (including clicking particular buttons, logging in, or recording which pages were visited by the user as far back as months or years ago).\"","title":"Cookie"},{"location":"stack-tooling/tracking/cookie/#cookies","text":"","title":"Cookies"},{"location":"stack-tooling/tracking/cookie/#definition","text":"From wikipedia: \"An HTTP cookie (also called web cookie, Internet cookie, browser cookie or simply cookie, the latter which is not to be confused with the literal definition), is a small piece of data sent from a website and stored in a user's web browser while the user is browsing that website. Every time the user loads the website, the browser sends the cookie back to the server to notify the website of the user's previous activity.[1] Cookies were designed to be a reliable mechanism for websites to remember stateful information (such as items in a shopping cart) or to record the user's browsing activity (including clicking particular buttons, logging in, or recording which pages were visited by the user as far back as months or years ago).\"","title":"Definition"},{"location":"stack-tooling/webapps/","text":"","title":"Home"},{"location":"stack-tooling/webapps/gitbook/","text":"GitBook \u00b6 Gitbook is a nodetool (and hosted service) that compiles your gitbook style repositories.","title":"GitBook"},{"location":"stack-tooling/webapps/gitbook/#gitbook","text":"Gitbook is a nodetool (and hosted service) that compiles your gitbook style repositories.","title":"GitBook"},{"location":"tools/tsrun/","text":"","title":"tsrun"}]}